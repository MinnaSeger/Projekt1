package projekt1;
import oru.inf.InfDB;
import oru.inf.InfException;
import javax.swing.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.HashMap;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
public class MenyLanderAdmin extends javax.swing.JFrame {
    private InfDB idb;
    private String dbAid;
    
        public MenyLanderAdmin(InfDB idb, String dbAid) {
        this.idb = idb;
        this.dbAid = dbAid;
        initComponents();
        }
       
        
          private void LetaLand (String searchText) {
        try {
            // SQL-fråga för att söka på länder som matchar användarens text
            String query = "SELECT namn FROM land WHERE namn = '" + searchText + "'"; 
            
            // Hämta resultaten från databasen
            ArrayList<HashMap<String, String>> result = idb.fetchRows(query);


        if (result == null || result.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Landet finns inte i databasen.");
            return; // Avsluta om landet inte finns
        }
    } catch (InfException e) {
        JOptionPane.showMessageDialog(this, "Fel vid hämtning av data: " + e.getMessage());
    }
    }
          
          
          private void visaLandAlternativ() {
    String selectedCountry = tfdSkrivHar.getText(); // Här får vi texten från användarens inputfält
    
    if (selectedCountry.length() > 0) {
        // Skapa SQL-fråga för att hämta information om det valda landet
        String query = "SELECT sprak, politisk_struktur, ekonomi FROM land WHERE namn = '" + selectedCountry + "'";
        
        try {
            // Hämta resultatet från databasen
            HashMap<String, String> result = idb.fetchRow(query);
            
            // Om vi får ett resultat från databasen
            if (result != null) {
                // Rensa tidigare alternativ i JComboBox
                jComboBox2.removeAllItems();
                
                // Lägg till varje alternativ i JComboBox
                jComboBox2.addItem("Språk: " + result.get("sprak"));
                jComboBox2.addItem("Politisk struktur: " + result.get("politisk_struktur"));
                jComboBox2.addItem("Ekonomi: " + result.get("ekonomi"));
            } else {
                JOptionPane.showMessageDialog(this, "Landet finns inte i databasen.");
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Fel vid hämtning av data: " + e.getMessage());
        }
    }
    }

        
    //Fyller i ändring av val i rullistan
        private void fyllTextRutor () {
        String selectedCountry = tfdSkrivHar.getText(); // Här får vi texten från användarens inputfält
        try {
            //Hämta data med SQL fråga
            
       String query = "SELECT sprak, politisk_struktur, ekonomi FROM land WHERE namn = '" + selectedCountry + "'";

   
HashMap <String, String> userData = idb.fetchRow(query);
            
            if (userData != null) {
             tfdSkriv.setText(userData.get("namn"));

                        
    } else { JOptionPane.showMessageDialog(this, "Ingen Data hittades om dig.");

            } 
            
    }  catch (InfException e) { 
    JOptionPane.showMessageDialog(this, "Fel vid hämtning av data!" + e.getMessage());
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnOkKnapp = new javax.swing.JButton();
        lblSokEfterLand = new javax.swing.JLabel();
        tfdSkrivHar = new javax.swing.JTextField();
        lblValjAndring = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        tfdSkriv = new javax.swing.JTextField();
        lblAndring = new javax.swing.JLabel();
        btnSparaAndring = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnOkKnapp.setText("OK");
        btnOkKnapp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOkKnappMouseClicked(evt);
            }
        });
        btnOkKnapp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkKnappActionPerformed(evt);
            }
        });

        lblSokEfterLand.setText("Sök efter land");

        tfdSkrivHar.setText("Skriv här...");

        lblValjAndring.setText("Välj vad du vill ändra");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Språk", "Politisk struktur", "Ekonomi" }));

        tfdSkriv.setText("Skriv här...");

        lblAndring.setText("Ändring");

        btnSparaAndring.setText("Spara ändring");
        btnSparaAndring.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSparaAndringMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(lblSokEfterLand))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addComponent(lblValjAndring, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(lblAndring, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(133, 133, 133)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnOkKnapp, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tfdSkriv, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tfdSkrivHar, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(153, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnSparaAndring)
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblSokEfterLand)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfdSkrivHar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOkKnapp, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(lblValjAndring)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(lblAndring)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tfdSkriv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(btnSparaAndring)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOkKnappActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkKnappActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnOkKnappActionPerformed

    private void btnOkKnappMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOkKnappMouseClicked
                                       
    // Steg 1: Hämta texten som användaren har skrivit in
    String searchText = tfdSkrivHar.getText();

    // Steg 2: Kontrollera att användaren har skrivit något
    if (searchText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Skriv ett land i textfältet.");
        return;
    }

    // Steg 3: Bygg SQL-frågan för att kolla om landet finns
    String query = "SELECT namn FROM land WHERE namn = '" + searchText + "'";

    try {
        // Steg 4: Hämta resultaten från databasen
        ArrayList<HashMap<String, String>> result = idb.fetchRows(query);

        // Steg 5: Kontrollera om landet finns
        if (result != null && !result.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Landet finns i databasen!");
            
            // Fortsätt med att visa andra alternativ eller funktionalitet om landet finns
            visaLandAlternativ(); // Din metod för att visa landets alternativ

        } else {
            JOptionPane.showMessageDialog(this, "Landet finns inte i databasen.");
        }

    } catch (InfException e) {
        JOptionPane.showMessageDialog(this, "Fel vid hämtning av data: " + e.getMessage());
    }
    }//GEN-LAST:event_btnOkKnappMouseClicked

    private void btnSparaAndringMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSparaAndringMouseClicked
   // Hämta den valda kolumnen från JComboBox
    String selectedOption = (String) jComboBox2.getSelectedItem();
    String nyttVarde = tfdSkriv.getText();

    // Bestäm vilken kolumn som ska uppdateras
    String columnToUpdate = "";
    switch (selectedOption) {
        case "Språk":
            columnToUpdate = "sprak";
            break;
        case "Politisk struktur":
            columnToUpdate = "politisk_struktur";
            break;
        case "Ekonomi":
            columnToUpdate = "ekonomi";
            break;
        default:
            JOptionPane.showMessageDialog(this, "Ogiltigt val.");
            return; // Avsluta om inget val är giltigt
    }

    // Uppdatera databasen för den valda kolumnen
    try {
        String updateQuery = "UPDATE land SET " + columnToUpdate + " = '" + nyttVarde + "' WHERE lid = " + dbAid;
        System.out.println(updateQuery);
        idb.update(updateQuery);

        // Bekräftelse
        JOptionPane.showMessageDialog(this, "Ändringen har sparats!");
    } catch (InfException e) {
        JOptionPane.showMessageDialog(this, "Fel vid inmatning av ändringar! " + e.getMessage());

        }     
    }//GEN-LAST:event_btnSparaAndringMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenyLanderAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenyLanderAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }  catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenyLanderAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenyLanderAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new MenyLanderAdmin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOkKnapp;
    private javax.swing.JButton btnSparaAndring;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel lblAndring;
    private javax.swing.JLabel lblSokEfterLand;
    private javax.swing.JLabel lblValjAndring;
    private javax.swing.JTextField tfdSkriv;
    private javax.swing.JTextField tfdSkrivHar;
    // End of variables declaration//GEN-END:variables
}
